datasource db {
  provider = "sqlite"
  url      = "file:../database/database.db"
}

generator client {
  provider = "prisma-client-js"
}

model Worker {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String?
  wage      Float
  otRate    Float    @default(0)
  isActive  Boolean  @default(true)
  balance   Float    @default(0)
  joinedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  attendances Attendance[]
  salaries    Salary[]
  advances    Advance[]
  expenses    Expense[]
}

enum AttendanceStatus {
  PRESENT
  HALF
  ABSENT
}

model Attendance {
  id        Int              @id @default(autoincrement())
  date      DateTime
  status    AttendanceStatus
  otUnits   Float?           @default(0)
  note      String? // optional free-text (reason / remark / proof reference)
  worker    Worker           @relation(fields: [workerId], references: [id])
  workerId  Int
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([workerId, date])
  @@index([date])
}

enum SalaryStatus {
  PENDING
  PARTIAL
  PAID
}

model Salary {
  id           Int          @id @default(autoincrement())
  workerId     Int
  cycleStart   DateTime
  cycleEnd     DateTime
  basePay      Float        @default(0)
  otPay        Float        @default(0)
  grossPay     Float        @default(0)
  totalAdvance Float        @default(0)
  totalExpense Float        @default(0)
  netPay       Float        @default(0)
  totalPaid    Float        @default(0)
  status       SalaryStatus @default(PENDING)
  paymentProof String?
  issuedAt     DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  worker Worker @relation(fields: [workerId], references: [id])
}

model Advance {
  id        Int      @id @default(autoincrement())
  workerId  Int
  amount    Float
  reason    String?
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation
  worker Worker @relation(fields: [workerId], references: [id])

  @@index([workerId, date])
}

model ExpenseType {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  expenses Expense[]
}

model Expense {
  id        Int         @id @default(autoincrement())
  workerId  Int
  amount    Float
  date      DateTime
  note      String?
  typeId    Int
  type      ExpenseType @relation(fields: [typeId], references: [id])
  worker    Worker      @relation(fields: [workerId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([workerId, date])
}
